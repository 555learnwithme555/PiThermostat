# Create your views here.
from django.utils import timezone
from django.http import Http404, HttpResponse
from django.shortcuts import get_object_or_404, render
from django.views.generic.list import ListView
from django.utils import timezone
import datetime, os
import re
from lights.models import Socket

def switch_socket(request, set_id, plug_id):
    cb = get_object_or_404(Socket, plug_id=plug_id,set_id=set_id )
    cb.lastcheckin=timezone.now()
    cb.switch_state = not(cb.switch_state)
    cb.save()
#    obj_list = Socket.objects(plug_id=plug_id)
##### Make the system call###########
    command_to_run = "sudo /usr/local/bin/toggle %s %s >/tmp/switchlogs.txt 2>&1" % (set_id, plug_id)
    log_device = "/usr/local/etc/device_%s_%s_on" % (set_id, plug_id)
    os.system(command_to_run)
    if ( cb.switch_state == True ):
	speak_state = "On"
        log_state = "/usr/bin/touch %s & >/dev/null 2>&1" % (log_device)
    else:
	speak_state="Off"	
        log_state = "/bin/rm -f %s & >/dev/null 2>&1" % (log_device)
    command_to_speak = "sudo /usr/bin/espeak -ven-wm 'Switched %s %s' & >/dev/null 2>&1" % (cb.name, speak_state)
    os.system(command_to_speak)
    os.system(log_state)
    return render(request, 'lights/socketswitch.html', { 'action':'switching', 'switch_socket': cb.name, 'set_id':set_id, 'plug_id':plug_id, 'switch_state':cb.switch_state } )


def socket_list(request,corortoggle):
    try:
    	socket_list = Socket.objects.all()
    except ValueError:
        raise Http404()
    if corortoggle == 'correct':
        template_name = 'lights/correctlist.html'
    elif corortoggle == 'toggle':
        template_name = 'lights/togglelist.html'
    else: 
        template_name = 'lights/togglelist.html'
    return render(request, template_name, {'sockets': socket_list})

def sockets(request):
    try:
    	socket_list = Socket.objects.all()
    except ValueError:
        raise Http404()
    template_name = 'lights/togglelist.html'
    return render(request, template_name, {'sockets': socket_list})

def correct_socket_state(request, set_id, plug_id):
    cb = get_object_or_404(Socket, plug_id=plug_id,set_id=set_id )
    cb.switch_state = not(cb.switch_state)
    cb.save()
    return render(request, 'lights/socketswitch.html', { 'action':'correcting', 'switch_socket': cb.name, 'set_id':set_id, 'plug_id':plug_id, 'switch_state':cb.switch_state } )

def holding_page(request):
    return render(request,'lights/holdingpage.html')
